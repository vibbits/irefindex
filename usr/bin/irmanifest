#!/bin/bash

# Copyright (C) 2012 Ian Donaldson <ian.donaldson@biotek.uio.no>
# Original author: Paul Boddie <paul.boddie@biotek.uio.no>
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation; either version 3 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.  See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program.  If not, see <http://www.gnu.org/licenses/>.

if [ -e "irdata-config" ]; then
    . "$PWD/irdata-config"
elif [ -e "scripts/irdata-config" ]; then
    . 'scripts/irdata-config'
else
    . 'irdata-config'
fi

MANIFEST_OUTPUT="$DATA/irefindex_manifest"

if [ "$1" = '--help' ]; then
    cat 1>&2 <<EOF
Usage: $PROGNAME ( <source>... | --all )

Create a manifest of source data releases. If --all is specified, the following
sources will be inspected:

$ALLSOURCES

Specifying --all will create a new manifest file. Specifying individual sources
will append manifest entries to any existing file in the following location:

$MANIFEST_OUTPUT
EOF
    exit 1
fi

if [ ! "$1" ]; then
    echo "$PROGNAME: Please specify source names or --all." 1>&2
    exit 1
elif [ "$1" = '--all' ]; then
    SOURCES="$ALLSOURCES"

    # Remove any existing output if it exists.

    if [ -e "$MANIFEST_OUTPUT" ]; then
        rm "$MANIFEST_OUTPUT"
    fi
else
    SOURCES=$*
fi

# Return the file(s) modification date (UTC)
function irfiletime {
    for file in $*; do
        TZ=UTC stat -c '%y' $file | sed 's/\..*//'
    done
}

# Loop over the sources and collect manifest information in a file.

  for SOURCE in $SOURCES ; do
      echo "$SOURCE" 1>&2
      # Skip excluded sources.

      if isin "$SOURCE" $EXCLUDEDSOURCES ; then
          continue
      fi

      eval URL='$'"$SOURCE"_MANIFEST_URL
      eval INC='$'"$SOURCE"_MANIFEST_INC
      eval PARSER='$'"$SOURCE"_MANIFEST_PARSER
      eval FILE='$'"$SOURCE"_MANIFEST_FILE

      # Non-manifest information of interest.

      eval DOWNLOAD_FILES='$'"$SOURCE"_DOWNLOAD_FILES
      eval SOURCEDIR='$'"$SOURCE"_DIR_NAME
      eval RELEASE_URL='$'"$SOURCE"_RELEASE_URL

      DATADIR="$DATA/$SOURCEDIR"

      # If a source provides a URL, extract manifest information from the resource.
      echo "$URL $INC $PARSER $FILE $DOWNLOAD_FILES $SOURCEDIR $RELEASE_URL $DATADIR" 1>&2
      echo "$URL" 1>&2

      if [ "$INC" ]; then
          cat "$MANIFESTS/$INC"
      else
        if [ "$URL" ]; then
            echo "$SOURCE" 1>&2
            source=$(echo $SOURCE | tr '[:upper:]' '[:lower:]')
            DETAILS="$MANIFESTS/irdata_manifest_$source.txt"

            "$TOOLS/irdata_manifest.py" "$URL" < "$DETAILS" \
              | sed -e "s/\(.*\)/$SOURCE\t\\1/"

        # If a source uses a manifest parser, use that to obtain information.
        elif [ "$PARSER" ]; then
            "$SCRIPTS/$PARSER" "$DATADIR/$FILE" \
              | sed -e "s/\(.*\)/$SOURCE\t\\1/"

        # Otherwise, extract basic timestamp information from the downloads.
        elif [ "$DOWNLOAD_FILES" ]; then

            # Expand the download files.

            DOWNLOAD_PATHS=

            for DOWNLOAD in $DOWNLOAD_FILES ; do
                DOWNLOAD_PATHS="${DOWNLOAD_PATHS}${DOWNLOAD_PATHS:+ }"$DATADIR/$DOWNLOAD
            done

            # Get the earliest timestamp.
            MTIME=$(irfiletime $DOWNLOAD_PATHS | sort | head -n 1)
            echo -e "${SOURCE}\tDATE\t${MTIME}"
        fi

        # Add the non-manifest information.
        if [ "$RELEASE_URL" ]; then
            echo "R_URL" 1>&2
            echo -e "${SOURCE}\tRELEASE_URL\t${RELEASE_URL}"
        fi
        if [ "$DOWNLOAD_FILES" ]; then
            echo -e "${SOURCE}\tDOWNLOAD_FILES\t${DOWNLOAD_FILES}"
        fi
      fi
  done \
>> "$MANIFEST_OUTPUT"

# Make the date formats available for import.

cp "$MANIFESTS/dateformats.txt" "$DATA"

# Report any failed manifests.

FAILED=
for SOURCE in $SOURCES ; do

    # Skip excluded sources.

    if isin "$SOURCE" $EXCLUDEDSOURCES ; then
        continue
    fi

    if ! ( cut -f 1 "$MANIFEST_OUTPUT" | grep -e "$SOURCE" > /dev/null 2>&1 ) ; then
        FAILED="${FAILED}${FAILED:+ }$SOURCE"
    fi
done

if [ "$FAILED" ]; then
    echo "$PROGNAME: Manifest generation failed for sources: $FAILED"
    exit 1
fi
