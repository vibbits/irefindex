#!/bin/bash

# Copyright (C) 2011, 2012 Ian Donaldson <ian.donaldson@biotek.uio.no>
# Original author: Paul Boddie <paul.boddie@biotek.uio.no>
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation; either version 3 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.  See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program.  If not, see <http://www.gnu.org/licenses/>.

# Add sudo before commands that require elevated privileges
if [ -e "irdata-config" ]; then
    . "$PWD/irdata-config"
elif [ -e "scripts/irdata-config" ]; then
    . 'scripts/irdata-config'
else
    . 'irdata-config'
fi

if [ "$1" = '--help' ]; then
    cat 1>&2 <<EOF
Usage: $PROGNAME [ --check | --no-parse ] <source>

Parse data from the specified source. The following sources are supported:

$ALLSOURCES

If the source is specified as - it is read from standard input.
EOF
    exit 1
fi

if [ "$1" = '--fix' ]; then
    FIX=$1
    CHECK=$1 # --fix implies --check
    NO_PARSE=$1 # --fix implies --no-parse
    shift 1
fi

if [ "$1" = '--check' ]; then
    CHECK=$1
    NO_PARSE=$1 # --check implies --no-parse
    shift 1
fi

if [ "$1" = '--no-parse' ]; then
    NO_PARSE=$1
    shift 1
fi

SOURCE=$1

if [ "$SOURCE" = '-' ]; then
    echo "$PROGNAME: Reading source name from standard input..." 1>&2
    read -r SOURCE
fi

if [ "$NO_PARSE" ]; then
    echo "$PROGNAME: Examining $SOURCE..." 1>&2
else
    echo "$PROGNAME: Parsing $SOURCE..." 1>&2
fi

eval SOURCEDIR='$'"$SOURCE"_DIR_NAME
eval XMLFILEPATTERN='$'"$SOURCE"_XML_FILE_PATTERN
eval OTHERFILEPATTERN='$'"$SOURCE"_OTHER_FILE_PATTERN
FILEPATTERNS=${XMLFILEPATTERN:-$OTHERFILEPATTERN}
eval PARSER='$'"$SOURCE"_PARSER

# Check for improper source names which don't map to directories.

if [ ! "$SOURCEDIR" ]; then
    echo "$PROGNAME: $SOURCE is not a valid source name." 1>&2
    exit 1
fi

# Check for absent file-matching patterns.

if [ ! "$FILEPATTERNS" ]; then
    echo "$PROGNAME: $SOURCE does not provide any files." 1>&2
    exit 1
fi

DATADIR="$DATA/$SOURCEDIR"

# Check for the source's data directory.

if [ ! -e "$DATADIR" ]; then
    echo "$PROGNAME: Source $SOURCE provides no data directory." 1>&2
    exit 1
fi

OUTPUTDIR="$DATA/import/$SOURCEDIR"

if [ ! -e "$OUTPUTDIR" ]; then
    mkdir -p "$OUTPUTDIR"
fi

# Expand the patterns.

HAVEDATA=
HAVEFAILED=

# Prevent the patterns from being expanded in the current directory.

set -f

for FILEPATTERN in $FILEPATTERNS; do

    # Now permit the expansion.

    set +f

    FILES="$DATADIR/$FILEPATTERN"
    HAVEFILES=
    FAILED=

    for FILE in $FILES; do

        # Check the pattern to see if it expanded.

        if [ "$FILE" = "$FILES" ] && [ ! -e "$FILES" ]; then
            break
        fi

        # Test for any XML file and run the checking tool.
        # NOTE: This relies on there either being XML files or other kinds of
        # NOTE: files.

        CHECKLOG="$OUTPUTDIR/xmlerrors-`basename $FILE`.log"

        if [ ! -e "$FILE" ] ; then
            echo "$PROGNAME: File $FILE in source $SOURCE missing." 1>&2
            FAILED="${FAILED}${FAILED:+ }$FILE"

        elif [ "$CHECK" ] && [ "$XMLFILEPATTERN" ] ; then

            # Where the check fails, run the fixing tool if requested.

            if ! "$TOOLS/irdata_xmlcheck.py" "$FILE" > /dev/null 2> "$CHECKLOG" ; then

                if [ "$FIX" ]; then
                    "$TOOLS/irdata_fixencoding.sh" "$FILE"
                    echo "$PROGNAME: File $FILE in source $SOURCE fixed." 1>&2
                else
                    echo "$PROGNAME: File $FILE in source $SOURCE failed." 1>&2
                    FAILED="${FAILED}${FAILED:+ }$FILE"
                fi

            # Remove any log from a successful invocation of the checking tool.

            else
                rm "$CHECKLOG"
            fi
        fi

        HAVEFILES='yes'
    done

    HAVEFAILED="${HAVEFAILED}${HAVEFAILED:+ }$FAILED"

    # Make sure there are valid files and none explicitly failed.

    if [ ! "$HAVEFILES" ] || [ "$FAILED" ]; then
        continue
    fi
    echo "$TOOLS/$PARSER" "$OUTPUTDIR" $FILES
    if [ ! "$NO_PARSE" ]; then
        if [ "$XMLFILEPATTERN" ]; then
            if ! "$TOOLS/irdata_xml2tab.py" "$OUTPUTDIR" "$SOURCE" $FILES ; then
                echo "$PROGNAME: XML processing for source $SOURCE failed." 1>&2
                exit 1
            fi
        elif [ ! "$PARSER" ]; then
            echo "$PROGNAME: No parser defined for source $SOURCE." 1>&2
            exit 1
        else
            if ! "$TOOLS/$PARSER" "$OUTPUTDIR" $FILES ; then
                echo "$PROGNAME: Data processing for source $SOURCE failed." 1>&2
                exit 1
            fi
        fi
    fi

    HAVEDATA='yes'
done

if [ "$HAVEDATA" ] && [ ! "$FAILED" ]; then
    echo $SOURCE
elif [ "$FAILED" ]; then
    echo "$PROGNAME: Source $SOURCE had invalid data." 1>&2
    exit 1
else
    echo "$PROGNAME: Source $SOURCE did not provide any data." 1>&2
    exit 1
fi
