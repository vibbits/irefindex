#!/bin/bash

# Copyright (C) 2012 Ian Donaldson <ian.donaldson@biotek.uio.no>
# Original author: Paul Boddie <paul.boddie@biotek.uio.no>
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation; either version 3 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.  See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program.  If not, see <http://www.gnu.org/licenses/>.

if [ -e "irdata-config" ]; then
    . "$PWD/irdata-config"
elif [ -e "scripts/irdata-config" ]; then
    . 'scripts/irdata-config'
else
    . 'irdata-config'
fi

if [ "$1" = '--help' ] || [ ! "$1" ]; then
    cat 1>&2 <<EOF
Usage: $PROGNAME [ --build [ --no-download ] ] [ --reports ] [ --output ]

Build interactor and assignment information from the imported source data.
EOF
    exit 1
fi

if [ "$1" = '--build' ]; then
    BUILD=$1
    shift 1
else
    BUILD=
fi

if [ "$1" = '--no-download' ]; then
    MISSING_OPTIONS='--import'
    shift 1
else
    MISSING_OPTIONS='--all'
fi

if [ "$1" = '--reports' ]; then
    MAKE_REPORTS=$1
    shift 1
else
    MAKE_REPORTS=
fi

if [ "$1" = '--output' ]; then
    MAKE_OUTPUT=$1
    shift 1
else
    MAKE_OUTPUT=
fi

# Consolidation of imported resources and interactor identification.

if [ "$BUILD" ]; then

    # Import any manifest information.

    if [ -e "$DATA/irefindex_manifest" ] && ! "$TOOLS/irdata_database_action.py" "$DATABASE" "$SQL/import_irefindex_manifest.sql" "$DATA" $PSQL_OPTIONS ; then
        echo "$PROGNAME: Manifest information could not be imported." 1>&2
        exit 1
    fi

    # Convert MITAB-based data to an XML-compatible representation.

    if ! "$TOOLS/irdata_database_action.py" "$DATABASE" "$SQL/mitab_to_xml.sql" $PSQL_OPTIONS ; then
        echo "$PROGNAME: Could not convert MITAB data to the common data representation." 1>&2
        exit 1
    fi

    # Finalise the XML-based data.

    if ! "$TOOLS/irdata_database_action.py" "$DATABASE" "$SQL/import_irefindex_constraints.sql" $PSQL_OPTIONS ; then
        echo "$PROGNAME: Constraints could not be applied to the common data representation." 1>&2
        exit 1
    fi

    # Import archived identifiers from a previous release.

    if [ -e "$DATA/sequences_archived" ] && ! "$TOOLS/irdata_database_action.py" "$DATABASE" "$SQL/import_irefindex_archived.sql" "$DATA" $PSQL_OPTIONS ; then
        echo "$PROGNAME: Could not import archived identifiers from the previous release." 1>&2
        exit 1
    fi

    # Build a sequence archive for the release.

    if ! "$TOOLS/irdata_database_action.py" "$DATABASE" "$SQL/import_irefindex_sequences.sql" $PSQL_OPTIONS ; then
        echo "$PROGNAME: Could not build a sequence archive from the imported data." 1>&2
        exit 1
    fi

    # Identify the interactors.

    if ! "$TOOLS/irdata_database_action.py" "$DATABASE" "$SQL/import_irefindex_interactors.sql" $PSQL_OPTIONS ; then
        echo "$PROGNAME: Could not build interactor information from the imported data." 1>&2
        exit 1
    fi

    # Establish gene-to-protein mappings.

    if ! "$TOOLS/irdata_database_action.py" "$DATABASE" "$SQL/import_irefindex_gene_mappings.sql" $PSQL_OPTIONS ; then
        echo "$PROGNAME: Could not create gene-to-protein mappings." 1>&2
        exit 1
    fi

    # Map identifiers to sequences in current databases.

    if ! "$TOOLS/irdata_database_action.py" "$DATABASE" "$SQL/import_irefindex_identifier_sequences.sql" $PSQL_OPTIONS --defs sequences irefindex_sequences linkprefix '' ; then
        echo "$PROGNAME: Could not build sequence information from the imported data." 1>&2
        exit 1
    fi

    # Map identifiers to sequences in archived databases.

    if ! "$TOOLS/irdata_database_action.py" "$DATABASE" "$SQL/import_irefindex_identifier_sequences.sql" $PSQL_OPTIONS --defs sequences irefindex_sequences_archived linkprefix 'archived/' ; then
        echo "$PROGNAME: Could not build sequence information from archived data." 1>&2
        exit 1
    fi

    # Map interactors to sequences.

    if ! "$TOOLS/irdata_database_action.py" "$DATABASE" "$SQL/import_irefindex_interactor_sequences.sql" $PSQL_OPTIONS ; then
        echo "$PROGNAME: Could not map interactors to sequences." 1>&2
        exit 1
    fi

    # Add missing interactor information.

    if ! "$SCRIPTS/irmissing" $MISSING_OPTIONS ; then
        echo "$PROGNAME: Did not retrieve missing/unknown sequences." 1>&2
        exit 1
    fi
fi

if [ "$MAKE_REPORTS" ]; then

    # Make a tidied up manifest report.
    echo "$REPORTS $DATA $PSQL_OPTIONS" 1>&2
    if ! "$TOOLS/irdata_database_action.py" "$DATABASE" "$REPORTS/manifest.sql" "$DATA" $PSQL_OPTIONS ; then
        echo "$PROGNAME: Could not report manifest information." 1>&2
        exit 1
    fi

    # Make an interactor report.

    if ! "$TOOLS/irdata_database_action.py" "$DATABASE" "$REPORTS/interactors_by_source.sql" "$DATA" $PSQL_OPTIONS ; then
        echo "$PROGNAME: Could not report source interactor information." 1>&2
        exit 1
    fi
fi

# Canonicalisation and interactor assignment.

if [ "$BUILD" ]; then

    # Make canonical interactor information.

    if ! "$SCRIPTS/ircanonical" --build ; then
        echo "$PROGNAME: Did not make canonical information." 1>&2
        exit 1
    fi

    # Assign definitive sequence information to interactors.

    if ! "$TOOLS/irdata_database_action.py" "$DATABASE" "$SQL/import_irefindex_assignments.sql" $PSQL_OPTIONS ; then
        echo "$PROGNAME: Could not build assignment information from the imported data." 1>&2
        exit 1
    fi
fi

if [ "$MAKE_REPORTS" ]; then

    # Make assigned interactor reports, if requested.

    if ! "$TOOLS/irdata_database_action.py" "$DATABASE" "$REPORTS/assignments_by_source.sql" "$DATA" $PSQL_OPTIONS ; then
        echo "$PROGNAME: Could not report sequence assignment information." 1>&2
        exit 1
    fi

    if ! "$TOOLS/irdata_database_action.py" "$DATABASE" "$REPORTS/rogids_by_source.sql" "$DATA" $PSQL_OPTIONS ; then
        echo "$PROGNAME: Could not report ROG identifier assignment information." 1>&2
        exit 1
    fi

    if ! "$TOOLS/irdata_database_action.py" "$DATABASE" "$REPORTS/rogids_by_score.sql" "$DATA" $PSQL_OPTIONS ; then
        echo "$PROGNAME: Could not report ROG identifier scoring information." 1>&2
        exit 1
    fi
fi

# Interaction definition.

if [ "$BUILD" ]; then

    # Export ROG information for RIG identifier calculation, make and import RIG identifiers.

    if ! "$TOOLS/irdata_database_action.py" "$DATABASE" "$SQL/export_irefindex_rogids.sql" "$DATA" $PSQL_OPTIONS ; then
        echo "$PROGNAME: Could not export ROG identifiers for assigned sequences." 1>&2
        exit 1
    fi

    if ! "$TOOLS/irdata_process_signatures.py" "$DATA/rogids_for_interactions" "$DATA/rigids_for_interactions" ; then
        echo "$PROGNAME: Could not generate RIG identifiers for the exported ROG identifiers." 1>&2
        exit 1
    fi

    if ! "$TOOLS/irdata_database_action.py" "$DATABASE" "$SQL/import_irefindex_rigids.sql" "$DATA" $PSQL_OPTIONS ; then
        echo "$PROGNAME: Could not import the generated RIG identifiers." 1>&2
        exit 1
    fi

    # Make canonical interaction information.

    if ! "$TOOLS/irdata_database_action.py" "$DATABASE" "$SQL/export_irefindex_rogids_canonical.sql" "$DATA" $PSQL_OPTIONS ; then
        echo "$PROGNAME: Could not export canonical ROG identifiers." 1>&2
        exit 1
    fi

    if ! "$TOOLS/irdata_process_signatures.py" "$DATA/rogids_for_interactions_canonical" "$DATA/rigids_for_interactions_canonical" ; then
        echo "$PROGNAME: Could not generate canonical RIG identifiers for the exported canonical ROG identifiers." 1>&2
        exit 1
    fi

    if ! "$TOOLS/irdata_database_action.py" "$DATABASE" "$SQL/import_irefindex_rigids_canonical.sql" "$DATA" $PSQL_OPTIONS ; then
        echo "$PROGNAME: Could not import the generated canonical RIG identifiers." 1>&2
        exit 1
    fi
fi

if [ "$MAKE_REPORTS" ]; then

    # Make an interactions report, if requested.

    if ! "$TOOLS/irdata_database_action.py" "$DATABASE" "$REPORTS/rigids_by_source.sql" "$DATA" $PSQL_OPTIONS ; then
        echo "$PROGNAME: Could not report RIG identifier assignment information." 1>&2
        exit 1
    fi

    if ! "$TOOLS/irdata_database_action.py" "$DATABASE" "$REPORTS/rigids_by_taxonomy.sql" "$DATA" $PSQL_OPTIONS ; then
        echo "$PROGNAME: Could not report RIG identifier taxonomy statistics." 1>&2
        exit 1
    fi

    if ! "$TOOLS/irdata_database_action.py" "$DATABASE" "$REPORTS/interactions_by_source.sql" "$DATA" $PSQL_OPTIONS ; then
        echo "$PROGNAME: Could not report interaction statistics." 1>&2
        exit 1
    fi

    if ! "$TOOLS/irdata_reports2wiki.py" "$DATA" "$DATA/Statistics.wiki" "$WIKIFORMAT" ; then
        echo "$PROGNAME: Could not generate statistics Wiki page." 1>&2
        exit 1
    fi
fi

# Preparation of output resources.

if [ "$BUILD" ]; then
   # done in separate script
    # Make convenient representations for other entity types.

    if ! "$TOOLS/irdata_database_action.py" "$DATABASE" "$SQL/import_irefindex_interactions.sql" $PSQL_OPTIONS ; then
        echo "$PROGNAME: Could not build interaction information from the imported data." 1>&2
        exit 1
    fi

    if ! "$TOOLS/irdata_database_action.py" "$DATABASE" "$SQL/import_irefindex_experiments.sql" $PSQL_OPTIONS ; then
        echo "$PROGNAME: Could not build experiment information from the imported data." 1>&2
        exit 1
    fi

    if ! "$TOOLS/irdata_database_action.py" "$DATABASE" "$SQL/import_irefindex_participants.sql" $PSQL_OPTIONS ; then
        echo "$PROGNAME: Could not build participant information from the imported data." 1>&2
        exit 1
    fi

    if ! "$TOOLS/irdata_database_action.py" "$DATABASE" "$SQL/import_irefindex_confidence.sql" $PSQL_OPTIONS ; then
        echo "$PROGNAME: Could not generate confidence score information." 1>&2
        exit 1
    fi

    # Import integer identifiers from a previous release.

    if [ -e "$DATA/rig2rigid" ] && [ -e "$DATA/rog2rogid" ] && ! "$TOOLS/irdata_database_action.py" "$DATABASE" "$SQL/import_irefindex_integer_identifiers.sql" "$DATA" $PSQL_OPTIONS ; then
        echo "$PROGNAME: Could not import integer identifiers from the previous release." 1>&2
        exit 1
    fi
fi

if [ "$MAKE_OUTPUT" ]; then

    # Make output files.

    "$SCRIPTS/iroutput" --mitab --mapping
fi
