---
- name: Irinit
  hosts: all
  become: true
  gather_facts: true # WE NEED THIS FOR THE 'ansible_distribution_release' VARIABLE
  vars_files:
    - ./vars/general.yml
    - ./vars/logs.yml

  vars:
    local_source_directory: "/home/guest/internship/stage-VIB-irefindex"
    remote_destination_directory: "/home/irefindex"

  tasks:
    - name: Install dependencies
      ansible.builtin.apt:
        name: "{{ item }}"
        state: present
      loop:
        - gnupg
        - python3-psycopg2
        - acl

    - name: Install PostgreSQL APT key
      ansible.builtin.apt_key:
        url: https://www.postgresql.org/media/keys/ACCC4CF8.asc
        state: present
      register: pgdg_key

    - name: Add PostgreSQL APT repository
      ansible.builtin.apt_repository:
        repo: "deb http://apt.postgresql.org/pub/repos/apt {{ ansible_distribution_release }}-pgdg main"
        state: present
        filename: pgdg.list
        update_cache: true
      register: pgdg_repo

    - name: Remove apt cache
      ansible.builtin.file:
        path: /var/lib/apt/lists/
        state: absent
      when: pgdg_repo.changed or pgdg_key.changed

    - name: Re-create apt cache
      ansible.builtin.file:
        path: /var/lib/apt/lists/
        state: directory
        mode: "0755"
      register: apt_cache
      when: pgdg_repo.changed or pgdg_key.changed
      notify:
        - Clear APT cache
        - Update APT cache

    - name: Flush handlers
      ansible.builtin.meta: flush_handlers

    - name: Install PostgreSQL
      ansible.builtin.apt:
        name: "{{ item }}"
        state: present
      with_items:
        - postgresql-14
        - postgresql-client-14

    - name: Ensure PostgreSQL service is started
      ansible.builtin.service:
        name: postgresql
        state: started

    - name: Ensure data directory exists
      file:
        path: /mnt/disks/data/var/lib/postgresql/14/main
        state: directory
        owner: postgres
        group: postgres
        mode: '0777'

    - name: Ensure stats temp directory exists
      file:
        path: /mnt/disks/data/var/run/postgresql/14-main.pg_stat_tmp
        state: directory
        owner: postgres
        group: postgres
        mode: '0777'

    - name: Ensure PostgreSQL instance is stopped before changing configuration
      service:
        name: postgresql@14-main
        state: stopped

    - name: Ensure specific settings are set in postgresql.conf
      ansible.builtin.lineinfile:
        path: /etc/postgresql/14/main/postgresql.conf
        regexp: '^#?\s*{{ item.setting_name }}\s*='
        line: "{{ item.setting_name }} = '{{ item.desired_value }}'"
        state: present
      loop:
        - { setting_name: 'data_directory', desired_value: '/mnt/disks/data/var/lib/postgresql/14/main' }
        - { setting_name: 'stats_temp_directory', desired_value: '/mnt/disks/data/var/run/postgresql/14-main.pg_stat_tmp' }
    
    - name: Ensure PostgreSQL data directory exists and is empty
      become: true
      become_user: postgres
      shell: rm -rf /mnt/disks/data/var/lib/postgresql/14/main/*
      ignore_errors: yes  # Ignore errors if the directory is already empty

    - name: Initialize PostgreSQL data directory
      become: true
      become_user: postgres
      command: /usr/lib/postgresql/14/bin/initdb -D /mnt/disks/data/var/lib/postgresql/14/main

    - name: Ensure PostgreSQL instance is running
      service:
        name: postgresql@14-main
        state: started

    - name: Restart PostgreSQL
      service:
        name: postgresql@14-main
        state: restarted

    - name: Ensure 'root' user exists with superuser privileges
      community.postgresql.postgresql_user:
        name: root
        role_attr_flags: SUPERUSER
        login_user: postgres
      become_user: postgres
      become: true
      register: whoami_output

    - name: Create directory for logs
      ansible.builtin.file:
        path: "{{ logs_root_dir }}"
        state: directory
        mode: "0755"

    - name: Check if database exists
      community.postgresql.postgresql_query:
        login_user: postgres
        query: "SELECT datname FROM pg_database WHERE datname='irdata{{ release_major }}';"
        db: postgres
      become_user: postgres
      become: true
      register: irdata_db

    - name: Create database in PostgreSQL
      ansible.builtin.command: "createdb irdata{{ release_major }}"
      when: irdata_db.rowcount == 0
      changed_when: true

    - name: Restart PostgreSQL service
      service:
        name: postgresql
        state: restarted

    - name: Install Git
      ansible.builtin.apt:
        name: git
        state: present

    - name: Install rsync
      ansible.builtin.apt:
        name: rsync
        state: present

    - name: Copy the irefindex files from my local machine to the remote machine
      ansible.builtin.synchronize:
        src: "{{ local_source_directory }}/"
        dest: "{{ remote_destination_directory }}"
        delete: yes
        rsync_opts:
          - "--delete"

    - name: Find all files in /home/irefindex/usr/bin
      find:
        paths: /home/irefindex/usr/bin
        recurse: yes
        file_type: file
      register: files_to_update

    - name: Set execute permissions on all files
      file:
        path: "{{ item.path }}"
        mode: '0755'
      loop: "{{ files_to_update.files }}"
          
    - name: Create directories for irdata data
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        mode: "0755"
      with_items:
        - "{{ download_data }}var/lib/irdata/data"
        - "{{ download_data }}var/log/irdata"
        - "{{ download_data }}/{{ data }}"

    - name: Run irinit
      ansible.builtin.command: ./irinit --init
      args:
        chdir: /home/irefindex/usr/bin
      register: irinit_output
      when: irdata_db.rowcount == 0
      changed_when: true

  handlers:
    - name: Clear APT cache
      ansible.builtin.apt:
        autoclean: true

    - name: Update APT cache
      ansible.builtin.apt:
        update_cache: true
