---
- name: Irdownload
  hosts: all
  become: true
  gather_facts: true # WE NEED THIS HERE FOR THE DATES FOR THE LOGS!
  vars_files:
    - ./vars/logs.yml
    - ./vars/sources.yml

  vars:
    log_location: "{{ logs_dir }}/irdownload"

  tasks:
    - name: Update apt packages
      ansible.builtin.apt:
        update_cache: true

    - name: Install required packages
      ansible.builtin.apt:
        name: "{{ item }}"
        state: present
      loop:
        - apt-transport-https
        - ca-certificates
        - gnupg
        - curl
        - sudo

    - name: Add Google Cloud SDK repository
      ansible.builtin.lineinfile:
        dest: /etc/apt/sources.list.d/google-cloud-sdk.list
        line: "deb [signed-by=/usr/share/keyrings/cloud.google.asc] https://packages.cloud.google.com/apt cloud-sdk main"
        create: true
        mode: "0644"

    - name: Download Google Cloud SDK key
      ansible.builtin.get_url:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        dest: /usr/share/keyrings/cloud.google.asc
        mode: "0644"

    - name: Update apt packages with Google Cloud SDK repository
      ansible.builtin.apt:
        update_cache: true
        force_apt_get: true

    - name: Install Google Cloud CLI
      ansible.builtin.apt:
        name: google-cloud-cli
        state: present

    - name: Run jobs
      ansible.builtin.command: "./irdownload {{ item.name | upper }}"
      args:
        chdir: "/home/irefindex/usr/bin"
      async: "{{ item.download_runner_async | default(30) }}"
      changed_when: false
      loop: "{{ jobs }}"
      poll: 0
      register: result
      retries: "{{ item.download_runner_retries | default(18) }}"

    - name: Wait for jobs to complete
      ansible.builtin.async_status:
        jid: "{{ item.ansible_job_id }}"
      delay: "{{ item.item.download_delay | default(5) }}"
      ignore_errors: true
      retries: "{{ item.item.download_retries | default(18) }}"
      register: job_result
      until: job_result.finished == true
      loop: "{{ result.results }}"

    - name: "Ensure that `log_location` exists"
      ansible.builtin.file:
        path: "{{ log_location }}"
        state: directory
        mode: "0755"

    - name: Copy msg
      ansible.builtin.copy:
        content: "{{ item.msg }}"
        dest: "{{ log_location }}/{{ item.item.item.name }}.msg"
        mode: "0644"
        remote_src: false
      no_log: true
      when: item.msg is defined and item.msg != ""
      loop: "{{ job_result.results }}"

    - name: Copy logs
      ansible.builtin.copy:
        content: "{{ item.stdout }}"
        dest: "{{ log_location }}/{{ item.item.item.name }}.out"
        mode: "0644"
        remote_src: false
      no_log: true
      when: item.stdout != ""
      loop: "{{ job_result.results }}"

    - name: Copy error logs
      ansible.builtin.copy:
        content: "{{ item.stderr }}"
        dest: "{{ log_location }}/{{ item.item.item.name }}.err"
        mode: "0644"
        remote_src: false
      no_log: true
      when: item.stderr != ""
      loop: "{{ job_result.results }}"

    - name: Gather failed jobs
      ansible.builtin.set_fact:
        failed_jobs: "{{ failed_jobs | default([]) + [item.item.item.name] }}"
      no_log: true
      when: item.failed
      loop: "{{ job_result.results }}"

    - name: Print failed jobs
      ansible.builtin.fail:
        msg:
          - "The following resources failed to download: {{ failed_jobs | join(', ') }}"
          - "Please check the logs in `{{ log_location }}` for more information."
      when: failed_jobs is defined