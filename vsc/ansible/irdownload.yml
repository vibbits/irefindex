---
- name: Irdownload
  hosts: all
  become: true
  gather_facts: true # WE NEED THIS HERE FOR THE DATES!

  vars:
    # All sources that should be downloaded
    #
    # Parameters:
    #  runner_retries[default=3]: Number of times to retry the job if it fails
    #  runner_async[default=30]: Number of seconds to wait before checking if the job is finished
    #  retries[default=18]: Number of times to retry the check
    #  delay[default=5]: Delay in seconds between the checks
    jobs:
      - { name: "athaliana" }
      - { name: "bar" }
      - { name: "bhf_ucl" }
      - { name: "bind" }
      - { name: "bind_translation", }
      - { name: "biogrid", runner_async: 60, retries: 12, delay: 15 }
      - { name: "corum", runner_async: 60, retries: 12, delay: 15 }
      - { name: "dig" }
      - { name: "dip" }
      - { name: "fly" }
      - { name: "gene", runner_async: 600, retries: 60, delay: 30 }
      - { name: "genpept", runner_async: 36000, retries: 60, delay: 1800 }
      - { name: "hpidb" }
      - { name: "hprd" }
      - { name: "huri", runner_async: 60, retries: 36 }
      - { name: "imex", runner_async: 10800, retries: 108, delay: 300 }
      - { name: "innatedb" }
      - { name: "intact" }
      - { name: "intcomplex", retries: 6 }
      - { name: "ipi" }
      - { name: "matrixdb", runner_async: 300, retries: 30, delay: 30 }
      - { name: "mbinfo" }
      - { name: "mint", runner_async: 600, retries: 60, delay: 30 }
      - { name: "mmdb", runner_async: 60, retries: 36 }
      - { name: "mpact" }
      - { name: "mpidb" }
      - { name: "mppi" }
      - { name: "pdb", runner_async: 60, retries: 36 }
      - { name: "psi_mi" }
      - { name: "quickgo" }
      - { name: "reactome", runner_async: 300, retries: 30, delay: 30 }
      - { name: "refseq", runner_async: 36000, retries: 60, delay: 1800 }
      - { name: "taxonomy", runner_async: 60, retries: 36 }
      - { name: "uniprot", runner_async: 60, retries: 36 }
      - { name: "uniprotpp", runner_async: 300, retries: 30, delay: 30 }
      - { name: "virushost", runner_async: 60, retries: 36 }
      - { name: "yeast", runner_async: 60, retries: 36 }

    date: "{{ ansible_date_time.iso8601_basic }}"
    log_location: "/data/irdata18/logs/irdownload/{{ date }}"

  tasks:
    - name: Update apt packages
      ansible.builtin.apt:
        update_cache: true

    - name: Install required packages
      ansible.builtin.apt:
        name: "{{ item }}"
        state: present
      loop:
        - apt-transport-https
        - ca-certificates
        - gnupg
        - curl
        - sudo

    - name: Add Google Cloud SDK repository
      ansible.builtin.lineinfile:
        dest: /etc/apt/sources.list.d/google-cloud-sdk.list
        line: "deb [signed-by=/usr/share/keyrings/cloud.google.asc] https://packages.cloud.google.com/apt cloud-sdk main"
        create: true
        mode: "0644"

    - name: Download Google Cloud SDK key
      ansible.builtin.get_url:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        dest: /usr/share/keyrings/cloud.google.asc
        mode: "0644"

    - name: Update apt packages with Google Cloud SDK repository
      ansible.builtin.apt:
        update_cache: true
        force_apt_get: true

    - name: Install Google Cloud CLI
      ansible.builtin.apt:
        name: google-cloud-cli
        state: present

    - name: Run jobs
      ansible.builtin.command: "./irdownload {{ item.name | upper }}"
      args:
        chdir: "/home/irefindex/usr/bin"
      async: "{{ item.runner_async | default(30) }}"
      changed_when: false
      loop: "{{ jobs }}"
      poll: 0
      register: result
      retries: "{{ item.runner_retries | default(3) }}"

    - name: Wait for jobs to complete
      ansible.builtin.async_status:
        jid: "{{ item.ansible_job_id }}"
      delay: "{{ item.delay | default(5) }}"
      ignore_errors: true
      loop: "{{ result.results }}"
      retries: "{{ item.retries | default(18) }}"
      register: job_result
      until: job_result.finished == true

    - name: "Ensure that `log_location` exists"
      ansible.builtin.file:
        path: "{{ log_location }}"
        state: directory
        mode: "0755"

    - name: "Copy logs"
      ansible.builtin.copy:
        content: "{{ item.stdout }}"
        dest: "{{ log_location }}/{{ item.item.item.name }}.out"
        mode: "0644"
        remote_src: false
      no_log: true
      when: item.stdout != ""
      loop: "{{ job_result.results }}"

    - name: "Copy error logs"
      ansible.builtin.copy:
        content: "{{ item.stderr }}"
        dest: "{{ log_location }}/{{ item.item.item.name }}.err"
        mode: "0644"
        remote_src: false
      no_log: true
      when: item.stderr != ""
      loop: "{{ job_result.results }}"

    - name: Gather failed jobs
      ansible.builtin.set_fact:
        failed_jobs: "{{ failed_jobs | default([]) + [item.item.item.name] }}"
      no_log: true
      when: item.failed
      loop: "{{ job_result.results }}"

    - name: Print failed jobs
      ansible.builtin.fail:
        msg:
          - "The following resources failed to download: {{ failed_jobs | join(', ') }}"
          - "Please check the logs in `{{ log_location }}` for more information."
      when: failed_jobs is defined
