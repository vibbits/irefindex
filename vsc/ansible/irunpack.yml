---
- name: Irunpack
  hosts: all
  become: true
  gather_facts: true # WE NEED THIS HERE FOR THE DATES FOR THE LOGS!
  vars_files:
    - ./vars/logs.yml
    - ./vars/sources.yml

  vars:
    log_location: "{{ logs_dir }}/irunpack"

  tasks:
    - name: Install unzip
      ansible.builtin.apt:
        name: unzip
        state: present

    - name: Create unpack jobs
      ansible.builtin.command: "./irunpack {{ item.name | upper }}"
      args:
        chdir: "/home/irefindex/usr/bin"
      async: "{{ item.unpack_async | default(30) }}"
      changed_when: false
      loop: "{{ jobs }}"
      poll: 0
      register: result

    - name: Wait for unpack jobs to complete
      ansible.builtin.async_status:
        jid: "{{ item.ansible_job_id }}"
      register: job_result
      until: job_result.finished
      ignore_errors: true
      retries: "{{ item.item.unpack_retries | default(6) }}"
      delay: "{{ item.item.unpack_delay | default(5) }}"
      loop: "{{ result.results }}"

    - name: Check if directory exists
      ansible.builtin.stat:
        path: "/home/irefindex/var/lib/irdata/data/{{ item.item.item.name | regex_replace('_', '-') | upper }}"
      register: dir_stat
      no_log: true
      loop: "{{ job_result.results }}"

    - name: Store all non-existing directories their names
      ansible.builtin.set_fact:
        failed_dirs: "{{ failed_dirs | default([]) + [item.item.item.item.name | upper] }}"
      no_log: true
      when: not item.stat.exists
      loop: "{{ dir_stat.results }}"

    - name: Fail jobs where conditions are met
      ansible.builtin.assert:
        that:
          - "'gzip: stdin: invalid compressed data--format violated' not in item.stderr"
          - "'tar: Unexpected EOF in archive' not in item.stderr"
          - "'tar: Error is not recoverable: exiting now' not in item.stderr"
        fail_msg: "Failed"
      when: item.rc == 0
      no_log: true
      failed_when: false
      register: failed_jobs
      loop: "{{ job_result.results }}"

    - name: "Ensure that `log_location` exists"
      ansible.builtin.file:
        path: "{{ log_location }}"
        state: directory
        mode: "0755"

    - name: Copy msg
      ansible.builtin.copy:
        content: "{{ item.msg }}"
        dest: "{{ log_location }}/{{ item.item.item.name }}.msg"
        mode: "0644"
        remote_src: false
      no_log: true
      when: item.msg is defined and item.msg != ""
      loop: "{{ job_result.results }}"

    - name: Copy logs
      ansible.builtin.copy:
        content: "{{ item.stdout }}"
        dest: "{{ log_location }}/{{ item.item.item.name }}.out"
        mode: "0644"
        remote_src: false
      no_log: true
      when: item.stdout != ""
      loop: "{{ job_result.results }}"

    - name: Copy error logs
      ansible.builtin.copy:
        content: "{{ item.stderr }}"
        dest: "{{ log_location }}/{{ item.item.item.name }}.err"
        mode: "0644"
        remote_src: false
      no_log: true
      when: item.stderr != ""
      loop: "{{ job_result.results }}"

    - name: Gather failed jobs
      ansible.builtin.set_fact:
        filtered_failed_jobs: "{{ failed_jobs.results
                                | selectattr('msg', 'defined')
                                | selectattr('msg', 'equalto', 'Failed')
                                | list }} "
      when:
        - failed_jobs is defined
        - failed_jobs.results is defined

    - name: Print failed jobs
      ansible.builtin.fail:
        msg: >-
          The following resources failed to unpack: {{
          filtered_failed_jobs
          | map(attribute='item.item.item.name')
          | join(', ')
          }}.
          Please check the logs in `{{ log_location }}` for more information.
      when: filtered_failed_jobs is defined and filtered_failed_jobs | length > 0

    - name: Print missing dirs
      ansible.builtin.fail:
        msg: >-
          The following sources are missing, this might indicate a failed download: {{
          failed_dirs
          | map('regex_replace', '^(.*)$', '\1 (/home/irefindex/var/lib/irdata/data/\1)')
          | join(', ')
          }}
      when: failed_dirs is defined and failed_dirs | length > 0
