---
- name: Build
  hosts: all
  become: true
  vars_files:
    - ./vars/general.yml
    - ./vars/archives.yml
    - ./vars/logs.yml

  vars:
    log_location: "{{ logs_dir }}/irbuild"

  tasks:
    - name: Ensure external data folder exists
      ansible.builtin.file:
        path: "{{ data }}"
        state: directory
        mode: '0755'

    - name: Download archives
      ansible.builtin.get_url:
        url: "{{ item.url }}"
        dest: "{{ data }}/{{ item.name }}"
        mode: '0755'
      async: "{{ item.async }}"
      poll: 0
      register: download_result
      loop: "{{ archives }}"

    - name: Wait for downloads to complete
      ansible.builtin.async_status:
        jid: "{{ item.ansible_job_id }}"
      register: job_result
      until: job_result.finished
      retries: "{{ item.item.retries }}"
      delay: "{{ item.item.delay }}"
      ignore_errors: true
      loop: "{{ download_result.results }}"

    - name: Run irbuild
      ansible.builtin.command: ./irbuild --build --reports --output
      changed_when: false
      ignore_errors: true
      args:
        chdir: /home/irefindex/usr/bin

    - name: "Ensure that `log_location` exists"
      ansible.builtin.file:
        path: "{{ log_location }}"
        state: directory
        mode: "0755"

    - name: Copy msg
      ansible.builtin.copy:
        content: "{{ item.msg }}"
        dest: "{{ log_location }}/{{ item.item.item.name }}.msg"
        mode: "0644"
        remote_src: false
      no_log: true
      when: item.msg is defined and item.msg != ""
      loop: "{{ job_result.results }}"
      ignore_errors: true

    - name: Copy logs
      ansible.builtin.copy:
        content: "{{ item.stdout }}"
        dest: "{{ log_location }}/{{ item.item.item.name }}.out"
        mode: "0644"
        remote_src: false
      no_log: true
      when: item.stdout != ""
      loop: "{{ job_result.results }}"
      ignore_errors: true

    - name: Copy error logs
      ansible.builtin.copy:
        content: "{{ item.stderr }}"
        dest: "{{ log_location }}/{{ item.item.item.name }}.err"
        mode: "0644"
        remote_src: false
      no_log: true
      when: item.stderr != ""
      loop: "{{ job_result.results }}"
      ignore_errors: true

    - name: Gather failed jobs
      ansible.builtin.set_fact:
        failed_jobs: "{{ failed_jobs | default([]) + [item.item.item.name] }}"
      no_log: true
      when: item.failed
      loop: "{{ job_result.results }}"
      ignore_errors: true

    - name: Print failed jobs
      ansible.builtin.fail:
        msg:
          - "The following resources failed to download/build: {{ failed_jobs | join(', ') }}"
          - "Please check the logs in `{{ log_location }}` for more information."
      when: failed_jobs is defined
